import { Request, Response, NextFunction } from "express";
import config from "config";

import Member from "../models/member";

import AppError from "../utils/appError";

const gocardless = require("gocardless-nodejs");
const constants = require("gocardless-nodejs/constants");

const gocardlessAccessToken = config.get("goCardlessAccessToken");
const baseUrl = config.get("baseUrl");
const client = gocardless(
  gocardlessAccessToken,
  constants.Environments.Sandbox
);

/* Sends incoming user form data to GoCardless and returns a url to setup a direct debit mandate  */
const goCardlessMandateFlowHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const {
    firstName,
    lastName,
    email,
    county,
    postCode,
    phoneNumber,
    streetAddress,
    townOrCity,
    ageConfirm,
    homeChoir,
    consent,
  } = req.body;
  // trim and lower case email to get over a mongo query problem
  const parsedEmail = email.toLowerCase().trim();
  // check for spam .ru emails
  const pattern = /.ru$/;
  const match = parsedEmail.match(pattern);
  if (match) {
    return next(
      new AppError("Please provide a valid UK, EU or US email address", 401)
    );
  }
  // hash email to use in query string

  // create a billing request, returns a request id string
  const createMandateRequestURL = async () => {
    // create a billing request returns a request id string
    const { id } = await client.billingRequests.create({
      mandate_request: {
        scheme: "bacs",
      },
    });
    // add prefilled customer detail to the direct debit form
    const billingRequestFlow = await client.billingRequestFlows
      .create({
        lock_currency: true,
        // redirect customer to create account page with email in query string
        redirect_uri: `${baseUrl}/new-account-redirect-page`,
        exit_uri: `${baseUrl}`,
        prefilled_customer: {
          given_name: firstName,
          family_name: lastName,
          address_line1: streetAddress,
          city: townOrCity,
          region: county,
          postal_code: postCode,
          email: parsedEmail,
        },
        /* id generated by the GoCardless aip */
        links: {
          billing_request: id,
        },
      })
      .catch((error: any) => next(new AppError(error.message, error.code)));
    // send the billingRequestFlow object containing the redirect url for
    // the hosted signup form
    res.status(200).json(billingRequestFlow);
  };
  /* Create new customer object with all fields needed, even if blank,
   these will be populated, by the Gocardless webhook in another handler */
  const newMemberData = {
    first_name: firstName,
    last_name: lastName,
    email: parsedEmail,
    post_code: postCode,
    phone_number: phoneNumber,
    street_address: streetAddress,
    town_city: townOrCity,
    county,
    age_confirm: ageConfirm,
    home_choir: homeChoir,
    consent,
    active_mandate: false,
    active_member: false,
    mandate: "",
    membership_type: "Monthly",
    go_cardless_id: "",
  };

  // this runs first adding new customer info to the database or updating
  // an existing customer
  await Member.findOneAndUpdate({ email: email }, newMemberData, {
    upsert: true,
  })
    .then(async () => createMandateRequestURL())
    .catch((err: any) => next(new AppError(err.message, 500)));
  return null;
};
export default goCardlessMandateFlowHandler;
